##Using R

getwd() - get the name of the current working directory (useful for addressing the files stored there by name.ext)

setwd("") - setting the folder

dir() - list the content of the current folder

?FUNCTION - a help about the FUNCTION

source("scripts/myfirstcode.R") - to load the functions from the script myfirstcode.R

ls() shows the functions loaded (from the myfirstcode.R, here)

packageVersion("PACKAGE") - versoion of a package

library(PACKAGE) - load the package

c() - creating a vector ()

<- is the way of equality

TAB works with the first 2 letters of a variable - to check the value

list.files() - list all the files in the current directory

args(FUNCTION) - to check the arguments of the function

##Directories and files

dir.create("FILE") - creating a directory

file.create("NAME") - create file

file.exists("FILE") - check if a file exists

file.info("") - info about the file

file.rename("","") - renaming a file; same as file.copy()

dir.create(file.path("testdir2","testdir3"), recursive=TRUE) - creating nested directories

##Sequences

':' is always of step 1 (seq(along.with = my_seq) - same: the sequence of the length of my_seq with step 1  same as seq_along(my_seq))

rep(0, times=40) - vector of zeros, length 40

a:b, seq(a,b, by=step) - from a to be, incremented with 1

seq(a,b,length=n) - increment here doesn't matter

length() - length of a sequence

rep(c(0,1,2), times=10) - repeating vector

rep(c(0,1,2), each=10) - repeating each number in the vector 10 times

##Vectors

atomic (one data type) and lists

vector<1 - checking if every member of the vector is less than 1: TRUE if yes, FALSE - if no

paste(my_char, collapse = " ") - concatenation of a vector members with a " " in between the members

LETTERS - predefined vector of letters in R

##Missing values

NA - is for missing or not available value (is not a value, but a placeholder)
NaN - not a number

rep(NA,1000); rnorm(1000) - vectors of 1000 values of NA and 1000 random values of a normal distribution

sample(VECTOR, N) - get N random elements of VECTOR

is.na() - if NAs are in vectors

sum(VECTOR) - if VECTOR is of TRUE/FALSE - it will be used as 1/0 - this, sum will give the number of null values

##Vectors

Subsets - VECTOR[n1,n2] - all the elements from element number n1 to element number n2

x[is.na(x)], x[!is.na(x)] - vectors of elements: NA and not NA - (x[!is.na(x)&x>0] - all not NA and positive elements)

y[y>0] - vector of all elements > 0

vect<-c(foo=11,bar=2,norf=NA) - name the columns

x[c(-2, -10)] - exclude 2d and 10th elements

names(vect) - to get the names of the vector elements

names(vect2)<-c("foo","bar","norf") - assign names
compare 2 vectors - identical(vect1, vect2)

vect[c("foo","bar")] - get the values of columns foo and bar

##Matrices and Data frames

matrices can contain single type of data; data frames - many different classes of Data

dim(VECTOR)
attributes(VECTOR)

dim(VECTOR)<-c(N1,N2) - assigning attributes

class(VECTOR) - gives a class of the VECTOR

matrix(data,Nlines, Ncols) - create matrix

data.frame(names,data)

colnames(my_data)<-cnames - assigning column names to a data frame

##Control structures

if () else if {} else {}

"LOOP"  for (i in 1:10) {}

for{i in 1:4}; for{i in seq_along}; for{something in VECTOR}

can be nested with ncol, nrow

"WHILE"
evaluation of conditions from left to right
while {something < N} {}

"REPEAT, NEXT, BREAK"

REPEAT is used to use BREAK
NEXT is used to skip a number of iterations if(i<=20) {next}

"FUNCTIONS"

add2<-function(x,y){
      x+y
}

##Logic

1: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
2: 6 >= -9 && !(6 > 7) && !(!TRUE)
3: FALSE || TRUE && 6 != 4 || 9 > 4
4: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79


which()
any()
xor()
| and ||
& and &&

##FUNCTIONS
--Passing a functions as an argument
evaluate <- function(func, dat){
   func(dat)
   }

evaluate(function(x){x+1}, 6)
[1] 7

args <-list(...)

"%p%" <- function(left,right){ # Remember to add arguments!
  paste(left,right) - binary

##Dates and Times

class() ; unclass()

VARIABLE$min

##SPLIT-APPLY-COMBINE strategy
Each of the *apply functions will SPLIT up some data into smaller pieces, APPLY a function to each piece, then COMBINE the results.
##lapply, sapply, apply, tapply, mapply

lapply - loop over a list and evaluate a function on each element

cls_list<-lapply(flags,class) - apply class to any element of flags data.frame

sapply - same as lapply, but simplifies the results
simplified way of lapply

In general, if the result is a list where every element is of length one, then sapply() returns a vector. If the result is a list where
| every element is a vector of the same length (> 1), sapply() returns a matrix. If sapply() can't figure things out, then it just returns a
| list, no different from what lapply() would give you

apply - apply a function over the margins of an array (summaries of matrices)

tapply - apply a function over subsets of a vector

mapply - multivariate version of lapply


#LAPPLY (x - list, function, ...) - always returns a list

if x is not a list - it will be as.list
 --- x<-list(a=1:5,b=rnorm(10))
 --- lapply(x,mean) --  each element of the x list will be calculated a mean;
 result will be the vector of length 2 with the 2 means

#SAPPLY (same as LAPPLY, but the with the simplified results)

if result is a list, where every element is length 1 - the vector will be returned

if result is a list, where every element is vector of the same length (>1), a matrix is returned

list - in all the other cases

#APPLY (x, MARGIN, FUN, ...) - is used to evaluate a function (oft anonymous one) over the margins of an array

for the rows or columns of a matrix

can be used with general arrays - taking average of an array or Matrices

faster than a LOOP

MARGIN - integer vector, indicating, which margins should be "retained" (1 - rows; 2 - columns)

matrix(range, m, n) - m - num of rows, n - num of columns - 1 is an index for rows, 2 - for columns
if applying a function against rows/columns of a matrix

 #MAPPLY (FUN, ..., MoreArgd(list of args to FUN) = NULL, SIMPLIFY (for result) = TRUE, )
 multivariate apply of sorts which applies a function in parallel over a set of arguments

 can take multiple lists

 #TAPPLY (x, INDEX (factor or list of factors), FUN, ...)

 apply a function over subset of a vector
 ... - contains other arguments for FUN


 #SPLIT(x,f,drop="FALSE",...) - always returns a list
 splits vector or other objects into groups, determined by a factor or lists

 s<-split(airquality, airquality$Month)
 lapply(s, function(x) colMeans(x[,c("Ozone,"Solar.R","Wind")]))

 ##Debugging

 message, warning, error, conditions

 invisible(x) - executes silently, does not return the result after a function execution

 traceback, debug, browser, trace, recover

 #VAPPLY - (same as sapply, but the outcome is being specified, the format)

 If we wish to be explicit about the format of the result we expect, we can use vapply(flags, class, character(1)). The 'character(1)'
argument tells R that we expect the class function to return a character vector of length 1 when applied to EACH column of the flags
dataset. Try it now.

apply() as being 'safer' than sapply(), since it requires you to specify the format of the output in advance, instead of
just allowing R to 'guess' what you wanted. In addition, vapply() may perform faster than sapply() for large datasets. However, when doing
data analysis interactively (at the prompt), sapply() saves you some typing and will often be good enough

#TAPPLY (X, INDEX (data division factor), FUN = NULL, ..., default = NA, simplify = TRUE)

If you take the arithmetic mean of a bunch of 0s and 1s, you get the proportion of
1s. Use tapply(flags$animate, flags$landmass, mean) to apply the mean function to
the 'animate' variable separately for each of the six landmass groups, thus giving
us the proportion of flags containing an animate image WITHIN each landmass group.

> tapply(flags$animate,flags$landmass,mean)
        1         2         3         4         5         6
0.4193548 0.1764706 0.1142857 0.1346154 0.1538462 0.3000000

with(mtcars,tapply(mpg,cyl,mean))
